{"version":3,"sources":["logo.svg","components/Country/Country.js","components/Country_List/CountryList.js","components/SearchBox/SearchBox.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Country","covid_data","className","src","CountryCode","alt","Active","Confirmed","Reacovered","Deaths","CountryList","map","cntry","key","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","search_field","target","value","state","countries","fetch","resp","json","this","forEach","a","Slug","data","length","prevState","concat","ISO2","filter_cntry","filter","toLowerCase","includes","toLocaleLowerCase","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6KAAAA,EAAOC,QAAU,IAA0B,kC,kNCgB5BC,G,kBAdC,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,WACZ,OACI,yBAAKC,UAAU,WACX,yBAAKC,IAAG,sCAAiCF,EAAWG,YAA5C,gBAAuEC,IAAKJ,EAAWD,UAC/F,4BAAKC,EAAWD,SAChB,yBAAKE,UAAU,QACX,kDAAoBD,EAAWK,SAC/B,kDAAoBL,EAAWM,YAC/B,kDAAoBN,EAAWO,aAC/B,kDAAoBP,EAAWQ,aCClCC,G,MATK,SAAC,GAAkB,IAAjBT,EAAgB,EAAhBA,WAClB,OACM,yBAAKC,UAAU,gBAETD,EAAWU,KAAI,SAAAC,GAAK,OAAI,kBAAC,EAAD,CAASC,IAAKD,EAAMR,YAAaH,WAAYW,UCKtEE,G,MATG,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,YAAYC,EAAkB,EAAlBA,aAC5B,OACK,2BAAOC,KAAK,SACZf,UAAU,SACVa,YAAaA,EACbG,SAAUF,MC6CJG,E,kDA7CT,aAAc,IAAD,8BACX,gBAyBFH,aAAe,SAACI,GACT,EAAKC,SAAS,CAACC,aAAaF,EAAEG,OAAOC,SAzB1C,EAAKC,MAAQ,CACXC,UAAY,GACZzB,WAAa,GACbqB,aAAe,IALN,E,yMASUK,MAAM,wC,cAAnBC,E,gBACkBA,EAAKC,O,OAAvBH,E,OACNI,KAAKT,SAAS,CAACK,cAEfI,KAAKL,MAAMC,UAAUK,QAArB,uCAA6B,WAAMnB,GAAN,iBAAAoB,EAAA,sEAENL,MAAM,4CAAD,OAA6Cf,EAAMqB,OAFlD,cAEnBL,EAFmB,gBAGNA,EAAKC,OAHC,QAGnBK,EAHmB,QAIjBC,QAEN,EAAKd,UAAS,SAAAe,GAAS,MACrB,CAAEnC,WAAamC,EAAUnC,WAAWoC,OAArB,2BAAgCH,EAAKA,EAAKC,OAAO,IAAjD,IAAqD/B,YAAYQ,EAAM0B,YAPjE,2CAA7B,kCAAAR,KAAA,gB,qIAiBH,IAAD,EACoCA,KAAKL,MAAhCxB,EADT,EACSA,WAAWqB,EADpB,EACoBA,aACZiB,EAAetC,EAAWuC,QAAO,SAAA5B,GAAK,OACxCA,EAAMZ,QAAQyC,cAAcC,SAASpB,EAAaqB,wBAEtD,OACE,yBAAKzC,UAAU,OACX,gDACA,kBAAC,EAAD,CAAWa,YAAY,yBACZC,aAAcc,KAAKd,eAC9B,kBAAC,EAAD,CAAaf,WAAcsC,S,GA1CvBK,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d3032f8f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './country.css';\r\nconst Country = ({covid_data}) => {\r\n      return(\r\n          <div className=\"country\">\r\n              <img src={`https://www.countryflags.io/${covid_data.CountryCode}/flat/64.png`} alt={covid_data.Country}></img>\r\n              <h2>{covid_data.Country}</h2>\r\n              <div className=\"data\">\r\n                  <p>{`Active     : ${covid_data.Active}`}</p>\r\n                  <p>{`Confirmed  : ${covid_data.Confirmed}`}</p>\r\n                  <p>{`Reacovered : ${covid_data.Reacovered}`}</p>\r\n                  <p>{`Deaths     : ${covid_data.Deaths}`}</p>\r\n              </div>\r\n          </div>\r\n      )\r\n}\r\nexport default Country ;","import React from 'react';\r\nimport Country from '../Country/Country';\r\nimport './countrylist.css';\r\nconst CountryList = ({covid_data}) => {\r\n    return(\r\n          <div className=\"country_list\">\r\n              {\r\n                covid_data.map(cntry => <Country key={cntry.CountryCode} covid_data={cntry} />)\r\n              }\r\n          </div>\r\n    )\r\n}\r\nexport default CountryList ;","import React from 'react';\r\nimport './SearchBox.css';\r\n\r\nconst SearchBox = ({placeholder,handleChange}) => {\r\n    return(\r\n         <input type='search'\r\n         className='search'\r\n         placeholder={placeholder}\r\n         onChange={handleChange}     \r\n         />\r\n    )\r\n}\r\nexport default SearchBox ;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport CountryList from './components/Country_List/CountryList';\nimport SearchBox from './components/SearchBox/SearchBox';\n\nclass App extends React.Component{\n      \n      constructor(){\n        super();\n        this.state = {\n          countries : [],\n          covid_data : [],\n          search_field : ''\n        }\n      }\n      async componentDidMount(){\n          const resp = await fetch('https://api.covid19api.com/countries')\n          const countries = await resp.json()\n          this.setState({countries})\n\n          this.state.countries.forEach(async cntry => {\n\n              const resp = await fetch(`https://api.covid19api.com/total/country/${cntry.Slug}`)\n              const data = await resp.json()\n              if(data.length)\n              {\n                this.setState(prevState => (\n                  { covid_data : prevState.covid_data.concat({...data[data.length-1], CountryCode:cntry.ISO2}) }\n                ))\n              }\n\n          })\n      }\n      handleChange = (e) => {\n             this.setState({search_field:e.target.value})\n      }\n      render()\n      {\n        const {covid_data,search_field} = this.state\n        const filter_cntry = covid_data.filter(cntry =>(\n            cntry.Country.toLowerCase().includes(search_field.toLocaleLowerCase())\n          ))\n        return (\n          <div className=\"app\">\n              <h1>Covid19 Data App</h1>\n              <SearchBox placeholder=\"Enter Country Name ...\"\n                         handleChange={this.handleChange} />\n              <CountryList covid_data = {filter_cntry} />\n          </div>\n        );\n      }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}